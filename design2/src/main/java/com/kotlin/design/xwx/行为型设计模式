

主要处理,类与对象，如何交互，如何分配职责

包含的设计模式有：

☆策略模式

 模板方法模式【Template  Method】
 定义如下：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。

 该模式的主要优点如下。
 它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。
 它在父类中提取了公共的部分代码，便于代码复用。
 部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。

 该模式的主要缺点如下。
 对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，间接地增加了系统实现的复杂度。
 父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。
 由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有子类都要改一遍。

 > Android中Activity的生命周期方法就是模板方法；同时initView initData initEvent方法也是模板方法
 > 业务中查看页面，是否能使用模板方法[对业务定义？]

  模式的应用场景
  模板方法模式通常适用于以下场景。
  算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。
  当多个子类存在公共的行为时，可以将其提取出来并集中到一个公共父类中以避免代码重复。首先，要识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。
  当需要控制子类的扩展时，模板方法只在特定点调用钩子操作，这样就只允许在这些点进行扩展。

    模板模式结构
     1、抽象类/抽象模板（Abstract Class）
        抽象模板类，负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成

        ① 模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。
        ② 基本方法：是整个算法中的一个步骤，包含以下几种类型。
        抽象方法：在抽象类中声明，由具体子类实现。
        具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。
        钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。

     2、具体子类/具体实现（Concrete Class）

    //http://c.biancheng.net/view/1376.html

☆观察者模式

 迭代器模式

☆责任链模式

 命令模式

 备忘录模式

☆状态模式

 访问者模式

 中介模式

 解析器模式



策略模式
   解耦，策略的定义、创建、使用三部分解耦开来，策略模式也是基于接口编程的。可以通过工厂方法创建对应的策略模式。



观察者模式
    对象间一种一对多的关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
    观察者模式，也是基于接口编程