
1、单一职责
一个类应该只有一个发生变化的原因；

2、开闭原则[open closed principle]
一个软件实体，如类、模块和函数应该对扩展开发，对修改关闭；

3、里氏替换原则[LPS]
    所有引用基类的地方必须能透明地使用子类的对象；

    里氏替换原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。
    里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范。

    里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。

    根据上述理解，对里氏替换原则的定义可以总结如下：
    子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法
    子类中可以增加自己特有的方法
    ☆当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松（子类：map  父类：HashMap）
    ☆当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等（父类：Map  子类：HashMap）否则报错

    https://www.jianshu.com/p/cf9f3c7c0df5
    http://c.biancheng.net/view/1324.html

    重载与重写


4、迪米特法则
只与你的直接朋友交谈，不跟陌生人说话
含义：如果两个软件实体无需直接通信，那么就不应该发生直接的相互调用，可以通过第三方转发调用。其目的是降低类之间的耦合度，提高模块的相对独立性。

5、接口隔离原则
5.1、客户端不应该依赖它不需要的接口。
5.2、类间的依赖关系应该建立在最小的接口上。
注意：该原则中的接口，是一个泛泛而言的接口，不仅仅指java中的接口，还包括其中的抽象类。


6、依赖倒置原则
6.1 上层模块不应该依赖底层模块，它们都应该依赖于抽象
6.2 抽象不应该依赖于细节，细节应该依赖抽象